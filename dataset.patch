diff --git a/Makefile b/Makefile
index a11b3a9..77120a9 100644
--- a/Makefile
+++ b/Makefile
@@ -1,11 +1,8 @@
-SUBDIR=benchmark \
-	   csr_bench \
-	   gpu_bench
+SUBDIR=benchmark
 
 ROOT=./
 
-TRAVIS_DIR=benchmark \
-		   csr_bench
+TRAVIS_DIR=benchmark
 
 include ${ROOT}/gen.mk
 
diff --git a/benchmark/Makefile b/benchmark/Makefile
index a96222b..8c28e1d 100644
--- a/benchmark/Makefile
+++ b/benchmark/Makefile
@@ -1,20 +1,31 @@
+# SUBDIR=bench_BFS \
+# 	   bench_DFS \
+# 	   bench_connectedComp \
+# 	   bench_degreeCentr \
+# 	   bench_betweennessCentr \
+# 	   bench_kCore \
+# 	   bench_shortestPath \
+# 	   bench_triangleCount \
+# 	   bench_graphUpdate \
+# 	   bench_graphConstruct \
+# 	   bench_TopoMorph \
+# 	   bench_pageRank \
+# 	   bench_graphColoring \
+# 	   ubench_add \
+# 	   ubench_find \
+# 	   ubench_delete \
+# 	   ubench_traverse
+
 SUBDIR=bench_BFS \
 	   bench_DFS \
 	   bench_connectedComp \
 	   bench_degreeCentr \
-	   bench_betweennessCentr \
 	   bench_kCore \
 	   bench_shortestPath \
 	   bench_triangleCount \
-	   bench_graphUpdate \
-	   bench_graphConstruct \
 	   bench_TopoMorph \
 	   bench_pageRank \
-	   bench_graphColoring \
-	   ubench_add \
-	   ubench_find \
-	   ubench_delete \
-	   ubench_traverse
+	   bench_graphColoring
 
 ROOT=../
 
diff --git a/benchmark/bench_BFS/Makefile b/benchmark/bench_BFS/Makefile
index 5316bb0..2cb59b9 100644
--- a/benchmark/bench_BFS/Makefile
+++ b/benchmark/bench_BFS/Makefile
@@ -1,9 +1,9 @@
 ROOT=../..
 TARGET=bfs
-OBJS=bfs.o 
+OBJS=bfs.o
 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small --root 31
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+RUN_ARGS=--threadnum 2 --dataset ../../dataset/cit-patent --root 6009541
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_BFS/bfs.cpp b/benchmark/bench_BFS/bfs.cpp
index 7630a28..5055cb8 100644
--- a/benchmark/bench_BFS/bfs.cpp
+++ b/benchmark/bench_BFS/bfs.cpp
@@ -88,20 +88,20 @@ void parallel_bfs(graph_t& g, size_t root, unsigned threadnum, gBenchPerf_multi
 
     vector<vector<uint64_t> > global_input_tasks(threadnum);
     global_input_tasks[vertex_distributor(root, threadnum)].push_back(root);
-    
+
     vector<vector<uint64_t> > global_output_tasks(threadnum*threadnum);
 
     bool stop = false;
-    #pragma omp parallel num_threads(threadnum) shared(stop,global_input_tasks,global_output_tasks,perf) 
+    #pragma omp parallel num_threads(threadnum) shared(stop,global_input_tasks,global_output_tasks,perf)
     {
         unsigned tid = omp_get_thread_num();
         vector<uint64_t> & input_tasks = global_input_tasks[tid];
-      
+
         perf.open(tid, perf_group);
-        perf.start(tid, perf_group); 
+        perf.start(tid, perf_group);
 #ifdef SIM
         unsigned iter = 0;
-#endif       
+#endif
         while(!stop)
         {
             #pragma omp barrier
@@ -110,23 +110,23 @@ void parallel_bfs(graph_t& g, size_t root, unsigned threadnum, gBenchPerf_multi
 #ifdef SIM
             SIM_BEGIN(iter==beginiter);
             iter++;
-#endif            
-        
+#endif
+
             for (unsigned i=0;i<input_tasks.size();i++)
             {
                 uint64_t vid=input_tasks[i];
                 vertex_iterator vit = g.find_vertex(vid);
                 uint16_t curr_level = vit->property().level;
-                
+
                 for (edge_iterator eit=vit->edges_begin();eit!=vit->edges_end();eit++)
                 {
                     uint64_t dest_vid = eit->target();
                     vertex_iterator destvit = g.find_vertex(dest_vid);
-#ifdef HMC                   
+#ifdef HMC
                     if (HMC_CAS_equal_16B(&(destvit->property().level),
                             MY_INFINITY,curr_level+1) == MY_INFINITY)
 #else
-                    if (__sync_bool_compare_and_swap(&(destvit->property().level), 
+                    if (__sync_bool_compare_and_swap(&(destvit->property().level),
                                 MY_INFINITY,curr_level+1))
 #endif
                     {
@@ -136,7 +136,7 @@ void parallel_bfs(graph_t& g, size_t root, unsigned threadnum, gBenchPerf_multi
             }
 #ifdef SIM
             SIM_END(iter==enditer);
-#endif            
+#endif
             #pragma omp barrier
             input_tasks.clear();
             for (unsigned i=0;i<threadnum;i++)
@@ -154,13 +154,13 @@ void parallel_bfs(graph_t& g, size_t root, unsigned threadnum, gBenchPerf_multi
         }
 #ifdef SIM
         SIM_END(enditer==0);
-#endif       
+#endif
         perf.stop(tid, perf_group);
     }
 
 }
 
-void bfs(graph_t& g, size_t root, BFSVisitor& vis, gBenchPerf_event & perf, int perf_group) 
+void bfs(graph_t& g, size_t root, BFSVisitor& vis, gBenchPerf_event & perf, int perf_group)
 {
     perf.open(perf_group);
     perf.start(perf_group);
@@ -168,7 +168,7 @@ void bfs(graph_t& g, size_t root, BFSVisitor& vis, gBenchPerf_event & perf, int
     std::queue<vertex_iterator> vertex_queue;
 
     vertex_iterator iter = g.find_vertex(root);
-    if (iter == g.vertices_end()) 
+    if (iter == g.vertices_end())
         return;
 
     vis.white_vertex(iter);
@@ -183,19 +183,19 @@ void bfs(graph_t& g, size_t root, BFSVisitor& vis, gBenchPerf_event & perf, int
 #ifdef SIM
     SIM_BEGIN(true);
 #endif
-    while (!vertex_queue.empty()) 
+    while (!vertex_queue.empty())
     {
-        vertex_iterator u = vertex_queue.front(); 
-        vertex_queue.pop();  
+        vertex_iterator u = vertex_queue.front();
+        vertex_queue.pop();
 
-        for (edge_iterator ei = u->edges_begin(); ei != u->edges_end(); ++ei) 
+        for (edge_iterator ei = u->edges_begin(); ei != u->edges_end(); ++ei)
         {
-            vertex_iterator v = g.find_vertex(ei->target()); 
+            vertex_iterator v = g.find_vertex(ei->target());
 
 
             uint8_t v_color = v->property().color;
 
-            if (v_color == COLOR_WHITE) 
+            if (v_color == COLOR_WHITE)
             {
                 vis.white_vertex(v);
 
@@ -205,8 +205,8 @@ void bfs(graph_t& g, size_t root, BFSVisitor& vis, gBenchPerf_event & perf, int
 
                 vertex_queue.push(v);
                 visit_cnt++;
-            } 
-            else if (v_color == COLOR_GREY) 
+            }
+            else if (v_color == COLOR_GREY)
             {
                 vis.grey_vertex(v);
             }
@@ -216,7 +216,7 @@ void bfs(graph_t& g, size_t root, BFSVisitor& vis, gBenchPerf_event & perf, int
             }
         }  // end for
         vis.finish_vertex(u);
-        u->property().color = COLOR_BLACK;         
+        u->property().color = COLOR_BLACK;
 
     }  // end while
 #ifdef SIM
@@ -279,7 +279,7 @@ int main(int argc, char * argv[])
     graph_t graph;
     double t1, t2;
 
-    cout<<"loading data... \n";    
+    cout<<"loading data... \n";
     t1 = timer::get_usec();
     string vfile = path + "/vertex.csv";
     string efile = path + "/edge.csv";
@@ -287,7 +287,7 @@ int main(int argc, char * argv[])
 #ifndef EDGES_ONLY
     if (graph.load_csv_vertices(vfile, true, separator, 0) == -1)
         return -1;
-    if (graph.load_csv_edges(efile, true, separator, 0, 1) == -1) 
+    if (graph.load_csv_edges(efile, true, separator, 0, 1) == -1)
         return -1;
 #else
     if (graph.load_csv_edges(efile, true, separator, 0, 1) == -1)
@@ -306,12 +306,12 @@ int main(int argc, char * argv[])
     BFSVisitor vis;
 
     cout<<"\nBFS root: "<<root<<"\n";
-    
+
     gBenchPerf_multi perf_multi(threadnum, perf);
     unsigned run_num = ceil(perf.get_event_cnt() /(double) DEFAULT_PERF_GRP_SZ);
     if (run_num==0) run_num = 1;
     double elapse_time = 0;
-    
+
     for (unsigned i=0;i<run_num;i++)
     {
         t1 = timer::get_usec();
diff --git a/benchmark/bench_DFS/Makefile b/benchmark/bench_DFS/Makefile
index d4adb46..c4597aa 100644
--- a/benchmark/bench_DFS/Makefile
+++ b/benchmark/bench_DFS/Makefile
@@ -1,9 +1,9 @@
 ROOT=../..
 TARGET=dfs
-OBJS=dfs.o 
+OBJS=dfs.o
 
-RUN_ARGS=--dataset $(ROOT)/dataset/small --root 31
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+RUN_ARGS=--dataset $(ROOT)/dataset/cit-patent --root 248533
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 include ../common.mk
 
diff --git a/benchmark/bench_TopoMorph/Makefile b/benchmark/bench_TopoMorph/Makefile
index 12f4575..cce3e5f 100644
--- a/benchmark/bench_TopoMorph/Makefile
+++ b/benchmark/bench_TopoMorph/Makefile
@@ -1,8 +1,8 @@
 ROOT=../..
 TARGET=topomorph
-OBJS=topomorph.o 
-RUN_ARGS=--dataset $(ROOT)/dataset/small
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+OBJS=topomorph.o
+RUN_ARGS=--dataset $(ROOT)/dataset/cit-patent
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 LINKER_OPTIONS+=-static
 EXTRA_CXX_FLAGS+=-fopenmp
diff --git a/benchmark/bench_betweennessCentr/Makefile b/benchmark/bench_betweennessCentr/Makefile
index d3dcb31..74d3a17 100644
--- a/benchmark/bench_betweennessCentr/Makefile
+++ b/benchmark/bench_betweennessCentr/Makefile
@@ -2,8 +2,9 @@ ROOT=../..
 TARGET=bc
 OBJS=bc.o
 
-RUN_ARGS=--undirected --threadnum 2 --dataset $(ROOT)/dataset/small
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent
+# RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/wiki-talk
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_betweennessCentr/bc.cpp b/benchmark/bench_betweennessCentr/bc.cpp
index a7e0f28..100e5f4 100644
--- a/benchmark/bench_betweennessCentr/bc.cpp
+++ b/benchmark/bench_betweennessCentr/bc.cpp
@@ -2,7 +2,7 @@
 //====== Betweenness Centrality ======//
 //
 // BC for unweighted graph
-// Brandes' algorithm 
+// Brandes' algorithm
 // Usage: ./bc.exe --dataset <dataset path>
 
 #include "common.h"
@@ -54,7 +54,7 @@ typedef graph_t::edge_iterator      edge_iterator;
 //==============================================================//
 void arg_init(argument_parser & arg)
 {
-    arg.add_arg("undirected","1","graph directness", false);
+    arg.add_arg("undirected","0","graph directness", false);
     arg.add_arg("maxiter","0","maximum loop iteration (0-unlimited, only set for simulation purpose)");
 }
 //==============================================================//
@@ -79,7 +79,7 @@ void bc(graph_t& g, bool undirected,
 
 
     vertex_iterator vit;
-    for (vit=g.vertices_begin(); vit!=g.vertices_end(); vit++) 
+    for (vit=g.vertices_begin(); vit!=g.vertices_end(); vit++)
     {
         size_t vertex_s = vit->id();
         stack<size_t> order_seen_stack;
@@ -87,7 +87,7 @@ void bc(graph_t& g, bool undirected,
 
         BFS_queue.push(vertex_s);
 
-        for (size_t i=0;i<vnum;i++) 
+        for (size_t i=0;i<vnum;i++)
         {
             shortest_path_parents[i].clear();
 
@@ -97,7 +97,7 @@ void bc(graph_t& g, bool undirected,
         }
 
         // BFS traversal
-        while (!BFS_queue.empty()) 
+        while (!BFS_queue.empty())
         {
             size_t v = BFS_queue.front();
             BFS_queue.pop();
@@ -105,17 +105,17 @@ void bc(graph_t& g, bool undirected,
 
             vertex_iterator vit = g.find_vertex(v);
 
-            for (edge_iterator eit=vit->edges_begin(); eit!= vit->edges_end(); eit++) 
+            for (edge_iterator eit=vit->edges_begin(); eit!= vit->edges_end(); eit++)
             {
                 size_t w = eit->target();
-                
-                if (depth_of_vertices[w]<0) 
+
+                if (depth_of_vertices[w]<0)
                 {
                     BFS_queue.push(w);
                     depth_of_vertices[w] = depth_of_vertices[v] + 1;
                 }
 
-                if (depth_of_vertices[w] == (depth_of_vertices[v] + 1)) 
+                if (depth_of_vertices[w] == (depth_of_vertices[v] + 1))
                 {
                     num_of_paths[w] += num_of_paths[v];
                     shortest_path_parents[w].push_back(v);
@@ -125,22 +125,22 @@ void bc(graph_t& g, bool undirected,
         }
 
         // dependency accumulation
-        while (!order_seen_stack.empty()) 
+        while (!order_seen_stack.empty())
         {
             size_t w = order_seen_stack.top();
             order_seen_stack.pop();
 
             double coeff = (1+centrality_update[w])/(double)num_of_paths[w];
             vertex_list_t::iterator iter;
-            for (iter=shortest_path_parents[w].begin(); 
-                  iter!=shortest_path_parents[w].end(); iter++) 
+            for (iter=shortest_path_parents[w].begin();
+                  iter!=shortest_path_parents[w].end(); iter++)
             {
                 size_t v=*iter;
 
                 centrality_update[v] += (num_of_paths[v]*coeff);
             }
 
-            if (w!=vertex_s) 
+            if (w!=vertex_s)
             {
                 vertex_iterator vit = g.find_vertex(w);
                 vit->property().BC += centrality_update[w]/normalizer;
@@ -158,7 +158,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
 {
     typedef list<size_t> vertex_list_t;
     size_t vnum = g.num_vertices();
-    
+
     uint64_t chunk = (unsigned)ceil(vnum/(double)threadnum);
     double normalizer;
     normalizer = (undirected)? 2.0 : 1.0;
@@ -167,7 +167,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
         unsigned tid = omp_get_thread_num();
 
         perf.open(tid, perf_group);
-        perf.start(tid, perf_group);  
+        perf.start(tid, perf_group);
 
         unsigned start = tid*chunk;
         unsigned end = start + chunk;
@@ -182,7 +182,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
 #ifdef SIM
         unsigned iter = 0;
 #endif
-        for (uint64_t vid=start;vid<end;vid++) 
+        for (uint64_t vid=start;vid<end;vid++)
         {
 #ifdef SIM
             SIM_BEGIN(iter==beginiter);
@@ -194,7 +194,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
 
             BFS_queue.push(vertex_s);
 
-            for (size_t i=0;i<vnum;i++) 
+            for (size_t i=0;i<vnum;i++)
             {
                 shortest_path_parents[i].clear();
 
@@ -204,7 +204,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
             }
 
             // BFS traversal
-            while (!BFS_queue.empty()) 
+            while (!BFS_queue.empty())
             {
                 size_t v = BFS_queue.front();
                 BFS_queue.pop();
@@ -212,7 +212,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
 
                 vertex_iterator vit = g.find_vertex(v);
                 uint16_t newdepth = depth_of_vertices[v]+1;
-                for (edge_iterator eit=vit->edges_begin(); eit!= vit->edges_end(); eit++) 
+                for (edge_iterator eit=vit->edges_begin(); eit!= vit->edges_end(); eit++)
                 {
                     size_t w = eit->target();
 #ifdef HMC
@@ -225,14 +225,14 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
                         HMC_ADD_16B(&(num_of_paths[w]), num_of_paths[v]);
                         shortest_path_parents[w].push_back(v);
                     }
-#else                    
-                    if (depth_of_vertices[w] == MY_INFINITY) 
+#else
+                    if (depth_of_vertices[w] == MY_INFINITY)
                     {
                         BFS_queue.push(w);
                         depth_of_vertices[w] = newdepth;
                     }
 
-                    if (depth_of_vertices[w] == newdepth) 
+                    if (depth_of_vertices[w] == newdepth)
                     {
                         num_of_paths[w] += num_of_paths[v];
                         shortest_path_parents[w].push_back(v);
@@ -243,15 +243,15 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
             }
 
             // dependency accumulation
-            while (!order_seen_stack.empty()) 
+            while (!order_seen_stack.empty())
             {
                 size_t w = order_seen_stack.top();
                 order_seen_stack.pop();
 
                 float coeff = (1+centrality_update[w])/(double)num_of_paths[w];
                 vertex_list_t::iterator iter;
-                for (iter=shortest_path_parents[w].begin(); 
-                        iter!=shortest_path_parents[w].end(); iter++) 
+                for (iter=shortest_path_parents[w].begin();
+                        iter!=shortest_path_parents[w].end(); iter++)
                 {
                     size_t v=*iter;
 #ifdef HMC
@@ -261,7 +261,7 @@ void parallel_bc(graph_t& g, unsigned threadnum, bool undirected,
 #endif
                 }
 
-                if (w!=vertex_s) 
+                if (w!=vertex_s)
                 {
                     vertex_iterator vit = g.find_vertex(w);
                     #pragma omp atomic
@@ -306,7 +306,7 @@ int main(int argc, char * argv[])
 {
     graphBIG::print();
     cout<<"Benchmark: Betweenness Centrality\n";
-    
+
     argument_parser arg;
     gBenchPerf_event perf;
     arg_init(arg);
@@ -330,7 +330,6 @@ int main(int argc, char * argv[])
     bool undirected;
     arg.get_value("undirected",undirected);
 
-
     graph_t graph;
     double t1, t2;
 
@@ -340,7 +339,7 @@ int main(int argc, char * argv[])
         cout<<"undirected graph\n";
     else
         cout<<"directed graph\n";
-    
+
     t1 = timer::get_usec();
     string vfile = path + "/vertex.csv";
     string efile = path + "/edge.csv";
@@ -348,7 +347,7 @@ int main(int argc, char * argv[])
 #ifndef EDGES_ONLY
     if (graph.load_csv_vertices(vfile, true, separator, 0) == -1)
         return -1;
-    if (graph.load_csv_edges(efile, true, separator, 0, 1) == -1) 
+    if (graph.load_csv_edges(efile, true, separator, 0, 1) == -1)
         return -1;
 #else
     if (graph.load_csv_edges(efile, true, separator, 0, 1) == -1)
@@ -364,16 +363,16 @@ int main(int argc, char * argv[])
     cout<<"== time: "<<t2-t1<<" sec\n";
 #endif
 
-    if (maxiter != 0 && threadnum != 1) 
+    if (maxiter != 0 && threadnum != 1)
         cout<<"\nenable maxiter: "<<maxiter<<" per thread";
     //processing
     cout<<"\ncomputing BC for all vertices...\n";
- 
+
     gBenchPerf_multi perf_multi(threadnum, perf);
     unsigned run_num = ceil(perf.get_event_cnt() / (double)DEFAULT_PERF_GRP_SZ);
     if (run_num==0) run_num = 1;
     double elapse_time = 0;
-   
+
     for (unsigned i=0;i<run_num;i++)
     {
         t1 = timer::get_usec();
diff --git a/benchmark/bench_connectedComp/Makefile b/benchmark/bench_connectedComp/Makefile
index b6f6639..284ef62 100644
--- a/benchmark/bench_connectedComp/Makefile
+++ b/benchmark/bench_connectedComp/Makefile
@@ -1,9 +1,9 @@
 ROOT=../..
 TARGET=connectedcomponent
-OBJS=connectedcomponent.o 
+OBJS=connectedcomponent.o
 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small  
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_degreeCentr/Makefile b/benchmark/bench_degreeCentr/Makefile
index cb57971..4ddc914 100644
--- a/benchmark/bench_degreeCentr/Makefile
+++ b/benchmark/bench_degreeCentr/Makefile
@@ -1,8 +1,8 @@
 ROOT=../..
 TARGET=dc
-OBJS=dc.o 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+OBJS=dc.o
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_gibbsInference/Makefile b/benchmark/bench_gibbsInference/Makefile
index 10537ae..d2b6146 100644
--- a/benchmark/bench_gibbsInference/Makefile
+++ b/benchmark/bench_gibbsInference/Makefile
@@ -6,6 +6,6 @@ EXTRA_FLAGS=-I../common/
 EXTRA_LIBS=-lm
 
 RUN_ARGS=--dataset ../../dataset/BNnet/alarm.dsc --root 0 --val 1 --iter 5000
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 include ../common.mk
diff --git a/benchmark/bench_graphColoring/Makefile b/benchmark/bench_graphColoring/Makefile
index 5b33561..3b7ab19 100644
--- a/benchmark/bench_graphColoring/Makefile
+++ b/benchmark/bench_graphColoring/Makefile
@@ -1,8 +1,9 @@
 ROOT=../..
 TARGET=graphcoloring
-OBJS=graphcoloring.o 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+OBJS=graphcoloring.o
+
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_graphConstruct/Makefile b/benchmark/bench_graphConstruct/Makefile
index a0e90b2..48f3aab 100644
--- a/benchmark/bench_graphConstruct/Makefile
+++ b/benchmark/bench_graphConstruct/Makefile
@@ -3,7 +3,7 @@ TARGET=graphconstruct
 OBJS=graphconstruct.o
 
 RUN_ARGS=--vertex 1000  --edge 10000
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES 
 #LINKER_OPTIONS+=-static
 EXTRA_CXX_FLAGS+=-fopenmp
 include ../common.mk
diff --git a/benchmark/bench_graphUpdate/Makefile b/benchmark/bench_graphUpdate/Makefile
index 5d1a2a6..6d647a7 100644
--- a/benchmark/bench_graphUpdate/Makefile
+++ b/benchmark/bench_graphUpdate/Makefile
@@ -1,8 +1,9 @@
 ROOT=../..
 TARGET=graphupdate
 OBJS=graphupdate.o
-RUN_ARGS=--dataset $(ROOT)/dataset/small --delete 100 
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+
+RUN_ARGS=--dataset $(ROOT)/dataset/cit-patent --delete 100
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 LINKER_OPTIONS+=-static
 EXTRA_CXX_FLAGS+=-fopenmp
 include ../common.mk
diff --git a/benchmark/bench_kCore/Makefile b/benchmark/bench_kCore/Makefile
index 42c8c81..536470c 100644
--- a/benchmark/bench_kCore/Makefile
+++ b/benchmark/bench_kCore/Makefile
@@ -1,8 +1,9 @@
 ROOT=../..
 TARGET=kcore
-OBJS=kcore.o 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small --kcore 6
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+OBJS=kcore.o
+
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent --kcore 6
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_pageRank/Makefile b/benchmark/bench_pageRank/Makefile
index 0b31bb8..cc47e1b 100644
--- a/benchmark/bench_pageRank/Makefile
+++ b/benchmark/bench_pageRank/Makefile
@@ -1,8 +1,9 @@
 ROOT=../..
 TARGET=pagerank
-OBJS=pagerank.o 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small --quad 0.001 --damp 0.85 --maxiter 100
-#PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS 
+OBJS=pagerank.o
+
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent --quad 0.001 --damp 0.85 --maxiter 100
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_shortestPath/Makefile b/benchmark/bench_shortestPath/Makefile
index 6accfa7..ac35023 100644
--- a/benchmark/bench_shortestPath/Makefile
+++ b/benchmark/bench_shortestPath/Makefile
@@ -1,8 +1,9 @@
 ROOT=../..
 TARGET=sssp
-OBJS=sssp.o 
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small --root 31 
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+OBJS=sssp.o
+
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent --root 248533
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
diff --git a/benchmark/bench_triangleCount/Makefile b/benchmark/bench_triangleCount/Makefile
index bb22829..7071469 100644
--- a/benchmark/bench_triangleCount/Makefile
+++ b/benchmark/bench_triangleCount/Makefile
@@ -1,8 +1,9 @@
 ROOT=../..
 TARGET=tc
 OBJS=tc.o
-RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/small
-PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS
+
+RUN_ARGS=--threadnum 2 --dataset $(ROOT)/dataset/cit-patent
+PERF_ARGS=--perf-event PERF_COUNT_HW_CPU_CYCLES PERF_COUNT_HW_INSTRUCTIONS PERF_COUNT_HW_BRANCH_INSTRUCTIONS PERF_COUNT_HW_BRANCH_MISSES PERF_COUNT_HW_CACHE_L1D_READ_ACCESS PERF_COUNT_HW_CACHE_L1D_READ_MISS PERF_COUNT_HW_CACHE_L1D_WRITE_ACCESS   PERF_COUNT_HW_CACHE_L1I_READ_MISS   PERF_COUNT_HW_CACHE_L2_READ_ACCESS PERF_COUNT_HW_CACHE_L2_READ_MISS PERF_COUNT_HW_CACHE_L2_WRITE_ACCESS  PERF_COUNT_HW_CACHE_L3_READ_ACCESS PERF_COUNT_HW_CACHE_L3_READ_MISS PERF_COUNT_HW_CACHE_L3_WRITE_ACCESS  PERF_COUNT_HW_CACHE_MISSES
 
 EXTRA_CXX_FLAGS+=-fopenmp
 
